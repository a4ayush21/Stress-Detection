import osimport sysimport cv2import timeimport numpy as npimport datetimeimport csvfrom csv import DictReaderimport pandas as pdimport timefrom tkinter import *import tkinter as tkimport tkinter.font as fontimport tkinter.ttk as ttkfrom tkinter.filedialog import askopenfilenamefrom PIL import Image, ImageTkimport ctypesimport threadingctypes.windll.shcore.SetProcessDpiAwareness(1)window = tk.Tk()  window.title("Register")window.geometry('640x400')window.resizable(0,0)window.rowconfigure(0, weight = 10)window.rowconfigure(1, weight = 10)window.rowconfigure(2, weight = 10)window.rowconfigure(3, weight = 10)window.columnconfigure(0, weight = 1)window.columnconfigure(1, weight = 1)window.columnconfigure(2, weight = 1)  lbl = tk.Label(window, text="ID",width=8  ,height=1  ,fg="Black" ,font=('Bahnschrift', 15, ' bold ') )lbl.grid(row = 0, column = 0, sticky = 'nsew',pady = 50)txt = tk.Entry(window,width=20  ,bg="White" ,fg="Black",font=('Bahnschrift', 15))txt.insert(0, 'Enter ID')txt.grid(row = 0, column = 1,columnspan=2, sticky = 'w')txt.configure(state=DISABLED)def on_click(event):    txt.configure(state=NORMAL)    txt.delete(0, END)    txt.unbind('<Button-1>', on_click_id)on_click_id = txt.bind('<Button-1>', on_click)lbl2 = tk.Label(window, text="  NAME",width=8  ,fg="Black"  ,height=1 ,font=('Bahnschrift', 15, ' bold '))lbl2.grid(row = 1, column = 0, sticky = 'nsew')txt2 = tk.Entry(window,width=20  ,bg="White"  ,fg="Black", font=('Bahnschrift', 15)  )txt2.insert(0, 'Enter name')txt2.grid(row = 1, column = 1,columnspan=2, sticky = 'w')txt2.configure(state=DISABLED)def on_click2(event):    txt2.configure(state=NORMAL)    txt2.delete(0, END)    txt2.unbind('<Button-1>', on_click_id2)on_click_id2 = txt2.bind('<Button-1>', on_click2)def TakeImages():    global id    id=(txt.get())    name =(txt2.get())    vid_cam = cv2.VideoCapture(0)    face_detector=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')        count=0    txt.delete(0, END)    txt2.delete(0, END)    while True:        _, image_frame=vid_cam.read()        gray=cv2.cvtColor(image_frame,cv2.COLOR_BGR2GRAY)        face_arr=face_detector.detectMultiScale(gray, 1.3, 5)        for(x,y,w,h)in face_arr:            cv2.rectangle(image_frame,(x,y),(x+w,y+h),(255,0,0),2)            count+=1            print(count)            cv2.putText(image_frame, str(count), (x,y-40), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 3)            cv2.imwrite("dataset/User."+str(id)+'.'+str(count)+".jpg",gray[y:y+h,x:x+w])            cv2.imshow('frame',image_frame)        if cv2.waitKey(100)& 0xFF == ord('q'):            break        elif count>120:            break    vid_cam.release()    cv2.destroyAllWindows()    row = [id, name]    with open('UserDetails.csv', 'a+') as csvFile:        writer = csv.writer(csvFile)        writer.writerow(row)                csvFile.close()     TrainImages()    def TrainImages():    import cv2, os    import numpy as np    from PIL import Image    recognizer = cv2.face.LBPHFaceRecognizer_create()    detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml");    def getImagesAndLabels(path):        image_Paths = [os.path.join(path,f) for f in os.listdir(path)]                 face_Samples=[]        ids = []        for image_Path in image_Paths:            PIL_image = Image.open(image_Path).convert('L')            img_numpy = np.array(PIL_image,'uint8')            id = int(os.path.split(image_Path)[-1].split(".")[1])            print(id)            face_arr = detector.detectMultiScale(img_numpy)            for (x,y,w,h) in face_arr:                face_Samples.append(img_numpy[y:y+h,x:x+w])                ids.append(id)        return face_Samples,ids    face_arr,ids = getImagesAndLabels('dataset')    recognizer.train(face_arr, np.array(ids))    recognizer.write('trainer.yml')    print("Training Completed")    status["text"]="Registered Successfully." def login():    global cam    global Id, aa    recognizer = cv2.face.LBPHFaceRecognizer_create()    recognizer.read('trainer.yml')    cascadePath = "haarcascade_frontalface_default.xml"    faceCascade = cv2.CascadeClassifier(cascadePath);    font = cv2.FONT_HERSHEY_SIMPLEX    df=pd.read_csv("UserDetails.csv")    cam = cv2.VideoCapture(0)    lecture=0    mon=0    count=0    var2=0    var=0    t=0    var1=0    def unsuccessful():        print("Login unsuccessful")         status["text"]="Login unsuccessful. Please Sign up."        cam.release()        cv2.destroyAllWindows()        window.destroy()    while True:        now = datetime.datetime.now()        ret, im =cam.read()        gray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)        face_arr = faceCascade.detectMultiScale(gray, 1.2,5)        if t==1:            t=0            break                for(x,y,w,h) in face_arr:            cv2.rectangle(im, (x-20,y-20), (x+w+20,y+h+20), (0,255,0), 4)            Id,i = recognizer.predict(gray[y:y+h,x:x+w])            print(i)            if i < 55:                aa=df.loc[df['Id'] == Id]['Name'].values                tt=str(Id)+"-"+aa                Id = df.loc[df['Id']== Id] ['Name'].values                print("known")                successful()            else:                count=count+1                Id = "unknown"                if count > 10:                    count=0                Id="unknown"                print("unknown")                cv2.imwrite("frame.png",im)                time.sleep(4)                break                mon=0                var2=1                              cv2.rectangle(im, (x-22,y-90), (x+w+22, y-22), (0,255,0), -1)            cv2.putText(im, str(Id), (x,y-40), font, 2, (255,255,255), 3)                if cv2.waitKey(20) & 0xFF == ord('q'):            break    cam.release()    cv2.destroyAllWindows()        def successful():    print("Login Successful")       status["text"]="Successfully logged in."    cam.release()    cv2.destroyAllWindows()    time.sleep(3)    emotion()            def emotion():    import numpy as np    import imutils    import cv2    from keras.models import load_model    import keras.preprocessing.image as krs        CLASSIFICATIONS = ["angry" ,                "disgust",                "scared",                "happy",                "sad",                "surprised",                "neutral"]    face_detection = cv2.CascadeClassifier('haarcascade/haarcascade_frontalface_default.xml')    emotion_classifier = load_model('models/_mini_XCEPTION.102-0.66.hdf5', compile=False)        def callback():         cv2.namedWindow('Face Recognition')        camera = cv2.VideoCapture(0)        while True:            frame = camera.read()[1]            frame = imutils.resize( frame, width=300)            gray = cv2.cvtColor( frame, cv2.COLOR_BGR2GRAY)            face_arr = face_detection.detectMultiScale( gray,scaleFactor=1.1,minNeighbors=5,minSize=(30,30),flags=cv2.CASCADE_SCALE_IMAGE)                        prob_area = np.zeros((250, 300, 3), dtype="uint8")            frame_Clone = frame.copy()                        if len(face_arr) > 0:                face_arr = sorted(face_arr, reverse=True,                key=lambda k: (k[2] - k[0]) * (k[3] - k[1]))[0]                (f_X, f_Y, f_W, f_H) = face_arr                region = gray[f_Y:f_Y + f_H, f_X:f_X + f_W]                region = cv2.resize(region, (64, 64))                region = region.astype("float") / 255.0                region = krs.img_to_array(region)                region = np.expand_dims(region, axis=0)                PREDICTIONS = emotion_classifier.predict(region)[0]                emotion_probability = np.max(PREDICTIONS)                label = CLASSIFICATIONS[PREDICTIONS.argmax()]            else: continue            for (i, (emotion, prob)) in enumerate(zip(CLASSIFICATIONS, PREDICTIONS)):                text = "{}: {:.2f}%".format(emotion, prob * 100)                cnt=1                if cnt==1:                                       x = int(prob * 300)                    cv2.rectangle(prob_area, (7, (i * 35) + 5),                    (x, (i * 35) + 35), (0, 0, 154), -1)                    cv2.putText(prob_area, text, (10, (i * 35) + 23),                    cv2.FONT_HERSHEY_SIMPLEX, 0.45,                    (254, 254, 254), 2)                    cv2.putText(frame_Clone, label, (f_X, f_Y - 10),                    cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 0, 154), 2)                    cv2.rectangle(frame_Clone, (f_X, f_Y), (f_X + f_W, f_Y + f_H),                                  (0, 0, 154), 2)                    cnt=0                    var=0            maxprob=0            emotion1="stress"            for (i, (emotion, prob)) in enumerate(zip(CLASSIFICATIONS, PREDICTIONS)):                if(maxprob<prob):                    emotion1=emotion                    maxprob=prob            if cv2.waitKey(1) & 0xFF == ord('q'):                if emotion1 in ["happy","neutral","surprised"]:                    emotion2="No stress"                    time.sleep(0.5)                                        elif emotion1 in ["angry","disgust","sad","scared"]:                    emotion2="Stress"                    time.sleep(0.5)                now = datetime.datetime.now()                dt_string = now.strftime("%d/%m/%Y %H:%M:%S")                  row = [dt_string, Id[0], emotion2]                with open('Performance.csv','a+') as csvFile:                    writer = csv.writer(csvFile)                    writer.writerow(row)                csvFile.close()                print("Successfully Updated")            cv2.imshow("Face Recognition", frame_Clone)            cv2.imshow("Probabilities", prob_area)        camera.release()        cv2.destroyAllWindows()    t = threading.Thread(target=callback)    t.start()    aa = tk.Button(window, text ="SIGN IN",command = login , fg ="white", bg ="black",width = 14, height = 1, activebackground = "white", activeforeground = "black",font =('Bahnschrift', 12, ' bold '))aa.grid(row = 2, column = 0, sticky = 'w',padx=25)        takeImg = tk.Button(window, text ="SIGN UP",command = TakeImages, fg ="white", bg ="black",width = 14, height = 1, activebackground = "white", activeforeground = "black",font =('Bahnschrift', 12, ' bold '))takeImg.grid(row = 2, column = 1, sticky = 'w')quitWindow = tk.Button(window, text ="EXIT",command = window.destroy, fg ="white", bg ="black",width = 14, height = 1, activebackground = "white", activeforeground = "black",font =('Bahnschrift', 12, ' bold '))quitWindow.grid(row = 2, column = 2, sticky = 'w')status = tk.Label(window, text="",width=8  ,fg="Black"  ,height=1 ,font=('Bahnschrift', 12))status.grid(row = 3, column = 0, columnspan=3, sticky = 'nsew')window.mainloop()   